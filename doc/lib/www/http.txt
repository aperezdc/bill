==================
Simple HTTP server
==================
:Author: Adrian Perez <aperez@igalia.com>
:License: GPL v2
:Copyright: 2008 Igalia S.L.
:Abstract: Provides a not-so-basic standalone web server.
    Socket functionality is **not** provided. Requests are
    read from standard input, responses are sent to standard
    output and logging is done the standard error stream.

.. contents::


Running a webserver
===================
Fortunately, dealing with sockets can be done in pure Bash [#]_.
Unfortunately enough, some distributors choose not to enable support for
this feature. This is the case of the Bash builds included with Debian_
and Ubuntu_.

.. [#] http://unixjunkie.blogspot.com/2006/01/two-cool-bash-tricks.html
.. _debian: http://debian.org
.. _ubuntu: http://ubuntulinux.org


Using auxiliar tools
--------------------
Some utilities exist which allow nearly all program
using the standard input and output streams to use sockets. It is likely
that at least one of these is available for your operating system of
choice. All those examples run a simple web server listening in port
``8000`` at ``127.0.0.1`` (the loopback network address). Once you try
one of those command lines, point a browser to http://localhost:8000/doc
and you will be able of browsing the Bill documentation using the simple
built-in web server.

.. class:: tabular

========== =============================================================
Package    Command
========== =============================================================
ipsvd_     ``tcpsvd 127.0.0.1 8000 ./scripts/bill lib/www/http.bsh``
ucspi-tcp_ ``tcpserver -q 127.0.0.1 8000 ./scripts/bill lib/www/http.bsh``
netcat_    ``(while true ; do nc -l -p 8000 -c './scripts/bill lib/www/http.bsh'; done)``
netpipes_  ``faucet 8000 -H 127.0.0.1 -i -o ./scripts/bill lib/www/http.bsh``
========== =============================================================

.. _ipsvd: http://smarden.org/ipsvd/
.. _ucspi-tcp: http://cr.yp.to/ucspi-tcp.html
.. _netcat: http://netcat.sourceforge.net/
.. _netpipes: http://web.purplefrog.com/~thoth/netpipes/netpipes.html

.. note:: Commands should be run from the top-level Bill source
    directory, otherwise they may not work.

.. warning:: The netcat_ command is very flaky, it will not accept
    concurrent connections, and in general will perform poorly.


Functions
=========




http_mimetype_guess
-------------------

::

  http_mimetype_guess path


Determines MIME types depending on the entries of a hash map named
``http_mime_mapping``, which contains a default set of entries which
suffice for serving the Bill documentation. The suffix of the file
pointed by ``path`` is used to determine its content type.

For example:

.. sourcecode:: bash

    (bill) http_mimetype_guess /etc/sysctl.conf
    text/plain





http_error_document
-------------------

::

  http_error_document [ code [ description ... ] ]


Generates an error document in standard output:

* ``code`` is the HTTP error code (default is ``500``)
* ``description`` is an arbitrary piece of text which will be inserted
  pre-formatted in the output.





http_error
----------

::

  http_error [ code [ description ... ] ]


Sends an HTTP error status code and an accompanying HTML document
explaining the error. Error document is formatted using
http_error_document_.




http_redirect
-------------

::

  http_redirect uri [ code ]


Sends an HTTP redirection, to the given ``uri``. If not supplied, the
``code`` will be ``302`` (a permanent redirect). You can pass ``301``
for temporary redirects. Keep in mind that using absolute paths in
redirects is recommended.




http_log_stderr
---------------

::

  http_log_stderr [ arg1 [ arg2 ... [ argN ] ] ]


Logs a line of output to standard error. Log format is as follows::

    <method> <path> HTTP/<version> - arg1 arg2 ... argN

Note that timestamps are not added to output. This is left as is
intentionally: it is nicer to add a filter in standard output which
does further formatting of logged text, and we do not have to mess
with date formatting.




http_handle_GET
---------------

::

  http_handle_GET


Default handler for the HTTP ``GET`` method. This does nothing more than
serving static files and producing directory listings. Also, if path
resolves to a directory which contains a file named ``index.html`` it
will be served instead.




http_handle_request
-------------------

::

  http_handle_request [ handler_prefix ]


Serves a single HTTP request. The following variables are set by the
function and their values **will be clamped** if already defined. Note
that most of them start with the ``HTTP_`` prefix or have names of the
variables used by the `CGI interface`_:

* REQUEST_METHOD
* PATH_INFO
* QUERY_STRING
* ...and so on.

.. _cgi interface: http://www.w3.org/CGI/

The ``handler_prefix`` can be used to change behavior of how requests
are served. It is used to find which functions are used to serve the
different HTTP methods. As an example, one could define:

.. sourcecode:: bash

    my_handler_GET () {
        # Do something interesting...
    }
    my_handler_HEAD () {
        # ...and something *even* more interesting.
    }

and then use ``my_handler`` as prefix, then the HTTP request hadler will
pass ``GET`` to ``my_handler_GET`` and ``HEAD`` ones to
``my_handler_HEAD``. This allows for easily reusing the HTTP module.


