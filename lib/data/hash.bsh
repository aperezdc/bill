#! /usr/bin/env bill
#++
#   ===========
#   Hash tables
#   ===========
#   :Author: Adrian Perez <aperez@igalia.com>
#   :Copyright: 2008 Igalia S.L.
#   :License: GPL v2
#   :Abstract: Efficient dictionary-like structures i.e. a hash tables.
#
#   .. contents::
#--


use data/random
use text/string


#++ hash_new
#
#   Creates a new hash table. Returns a has table identifier which is needed
#   as first argument to all the other functions of the module.
#--
hash_new () {
    echo ":bill:$(random_pseudo_hex 20):"
}


#++ hash_set hash_id key value
#
#   Associates a ``key`` with a ``value``. The ``hash_id`` parameter must be
#   an identifier obtained with hash_new_.
#--
hash_set () {
    builtin hash -d "$1$2" 2> /dev/null || true
    builtin hash -p "$3" "$1$2"
}


#++ hash_get hash_id key
#
#   Gets the value associated with a ``key``. The ``hash_id`` parameter must
#   be an identifier obtained with hash_new_. The exit status is non-zero
#   when an element is not found.
#--
hash_get () {
    builtin hash -t "$1$2" 2> /dev/null
}


#++ hash_del hash_id key
#
#   Deletes a *(key, value)* pair from a hash table. The ``hash_id``
#   parameter must be an identifier obtained with hash_new_.
#--
hash_del () {
    builtin hash -d "$1$2" 2> /dev/null || true
}


#++ hash_has hash_id key
#
#   Checks whether a given key is set in a hash table. The ``hash_id``
#   parameter must be an identifier obtained with hash_new_. The exit status
#   is zero when the keys exists, and non-zero otherwise.
#--
hash_has () {
    builtin hash -t "$1$2" &> /dev/null
}


#++ hash_keys_iter hash_id callback
#
#   Iterates over all keys of the given hash table ``hash_id``. The
#   ``callback`` will be called with the ``hash_id`` as first argument
#
#   .. warning:: Do not add or remove keys while iterating over the
#       elements, behaviour is undefined.
#--
hash_keys_iter () {
    local _a _b _c _d key hl=${#1}
    builtin hash -l | while read _a _b _c _d key ; do
        [[ ${key::$hl} = $1 ]] && "$2" "$1" "${key:$hl}"
    done
}


#++ hash_keys hash_id
#
#   Gathers all keys of a given hash table and print one key per line.
#--
hash_keys ()
{
    local _a _b _c _d key hl=${#1}
    builtin hash -l | while read _a _b _c _d key ; do
        [[ ${key::$hl} = $1 ]] && echo "${key:$hl}"
    done
}



#++ hash_clear hash_id
#
#   Empties a hash table. The ``hash_id`` parameter must be a valid
#   identifier obtained with hash_new_.
#--
hash_clear () {
    local keys=( $(hash_keys "$1") )
    local item
    for item in "${keys[@]}"
    do
        hash_del "$1" "$item"
    done
}

