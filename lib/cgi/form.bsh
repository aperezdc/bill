#! /usr/bin/env bill
#++
#   =============================
#   Handles HTML form submissions
#   =============================
#   :Author: Adrián Pérez <aperez@igalia.com>
#   :Copyright: 2008 Igalia S.L.
#   :License: GPL v2
#   :Abstract: Handles input in the formats provided by HTML forms.
#       This includes submissions in the ``multipart/form-data`` and
#       ``application/x-www-form-urlencoded`` encodings. This functionality
#       is typically needed in CGI scripts.
#
#   .. contents::
#--

use text/mime

need csplit head mkdir || "One of csplit, head, or mkdir is missing"


#++ form_urldecode
#   Reads data in a line-by-line basis from standard input, performs
#   URL-like decoding as defined in `RFC 1945
#   <http://http://www.w3.org/Protocols/rfc1945/rfc1945>`__ and sends
#   it decoded to standard output.
#--
form_urldecode ()
{
    local saved_IFS=$IFS key= val= line= item=

    while read line
    do
        line=${line//\\/\\\\}
        line=${line//\%/\\x}
        printf -v line "$line"

        IFS='&'
        for item in $line
        do
            key=${item%=*}
            val=${item#*=}
            echo "'$key' '$val'"
        done
        IFS=$saved_IFS
    done
}


#++ form_multipart_handle directory
#
#   Decodes standard input in ``multipart/form-data`` encoding to multiple
#   files in a directory. The directory will be laid out as follows, for
#   a directory named ``output``:
#
#   ``output/pack``
#       File containing the  unprocessed input, minus the marker present
#       at the last line.
#   ``output/raw/*``
#       Each file inside this directory is an unprocessed part of the input.
#   ``output/body/*``
#       Each file inside this directory contains the bodies of the parts.
#   ``output/headers/*``
#       Each file inside this directory contains the MIME headers of each
#       part.
#
#   For example, the first part will be named ``00`` (double-zero),
#   ``output/raw/00`` would be the unprocessed part, ``output/body/00``
#   its content body and ``output/headers/00`` the corresponding MIME
#   headers. Each part is decoded using the mime_decode_ function.
#
#   .. _mime_decode: mime.html#mime-decode
#--
form_multipart_handle ()
{
    mkdir -p "$1"/{raw,body,headers}

    # Dump input to file, removing last line. Last line is the same as the
    # marker (the first one) but with two dashes appended. It is unneeded
    # due to the hacky nature of this decoder :P
    head -n -1 > "$1/pack"

    # Read back boundary marker string.
    local marker=$(head -1 "$1/pack")

    # Split up parts in components
    csplit -q -z -f "$1/raw/" "$1/pack" "/^$marker/" '{*}'

    for name in "$1/raw"/*
    do
        local cook=${name##*/}
        # XXX The head invocation is needed to remove the trailing "\r\n" of
        # the input as given in the multipart form data.
        head -c -2 "$name" | mime_decode "$1/headers/$cook" > "$1/body/$cook"
    done
}





main form_multipart_handle "$@"

